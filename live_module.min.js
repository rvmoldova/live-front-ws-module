(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var LiveModule = (function () {
  function LiveModule(url, options) {
    _classCallCheck(this, LiveModule);

    this._reconnect = true;
    this._debug = false;
    this._cb = {};
    this._url = url;
    if (typeof options == 'object') {
      if (typeof options.reconnect != undefined) {
        this._reconnect = options.reconnect ? true : false;
      }
      if (typeof options.debug != undefined) {
        this._debug = options.debug ? true : false;
      }
      if (typeof options.onDisconnectCallback == 'function') {
        this._cb['onDisconnect'] = options.onDisconnectCallback;
      }
      if (typeof options.onConnectCallback == 'function') {
        this._cb['onConnect'] = options.onConnectCallback;
      }
      if (typeof options.onErrorCallback == 'function') {
        this._cb['onError'] = options.onErrorCallback;
      }
    }
  }

  _createClass(LiveModule, [{
    key: '_try_reconnect',
    value: function _try_reconnect() {
      if (this._reconnect && this._lastfail) {
        this.reconnect();
        setTimeout(this._try_reconnect, 1000);
      }
    }
  }, {
    key: 'connect',
    value: function connect() {
      var _this = this;

      if (this._socket) {
        this._socket.close();
      }
      this._socket = new WebSocket(this._url);
      var _super = this;
      this._socket.onopen = function (ev) {
        _this._lastfail = false;
        if (_super._debug) {
          console.debug('Connected to', _super._url);
          console.debug(ev);
        }
        if (_super._cb['onConnect']) {
          _super._cb['onConnect'](ev);
        }
      };
      this._socket.onclose = function (ev) {
        _this._lastfail = true;
        _this._try_reconnect();
        if (_super._debug) {
          console.debug('Disconnected from', _super._url);
          console.debug(ev);
        }
        if (_super._cb['onDisconnect']) {
          _super._cb['onDisconnect'](ev);
        }
      };
      this._socket.onerror = function (ev) {
        _this._lastfail = true;
        if (_super._debug) {
          console.debug('Error');
          console.debug(ev);
        }
        if (_super._cb['onError']) {
          _super._cb['onError'](ev);
        }
      };
      this._socket.onmessage = function (ev) {
        if (_super._debug) {
          console.debug('received msg');
          console.debug(ev.data);
        }

        var temp_msg = {};
        try {
          temp_msg = JSON.parse(ev.data);
        } catch (e) {}

        if (_super._cb[temp_msg.event]) {
          if (_super._debug) {
            console.debug('Calling cb for', temp_msg.event);
          }
          _super._cb[temp_msg.event](temp_msg.data);
        }
      };
    }
  }, {
    key: 'reconnect',
    value: function reconnect() {
      this._socket.close();
      this.connect();
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      this._reconnect = false;
      this._socket.close();
    }
  }, {
    key: 'auth',
    value: function auth(token) {
      this._socket.send(JSON.stringify({
        auth: token
      }));
    }
  }, {
    key: 'subscribe',
    value: function subscribe(channel, cb) {
      if (!cb) {
        throw 'no callback';
      }
      this._socket.send(JSON.stringify({
        subscribe: channel
      }));
      this._cb[channel] = cb;
    }
  }, {
    key: 'unsubscribe',
    value: function unsubscribe(channel) {
      this._socket.send(JSON.stringify({
        subscribe: channel
      }));
      this._cb[channel] = null;
    }
  }, {
    key: 'options',
    get: function get() {
      return {
        debug: this._debug,
        reconnect: this._reconnect,
        onDisconnectCallback: this._cb['onDisconnect'],
        onConnectCallback: this._cb['onConnect'],
        onErrorCallback: this._cb['onError']
      };
    }
  }]);

  window.LiveModule = LiveModule;
  return LiveModule;
})();

//


},{}]},{},[1]);
